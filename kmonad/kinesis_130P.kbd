#| --------------------------------------------------------------------------

    @see https://github.com/kmonad/kmonad/blob/master/keymap/tutorial.kbd

  -------------------------------------------------------------------------- |#

(defcfg
  input  (device-file "/dev/input/by-id/usb-13ba_Barcode_Reader-event-kbd")
  output (uinput-sink "My KMonad output"
    ;; Prepare support for compose-key
    "sleep 1 && setxkbmap -option compose:menu")
  cmp-seq menu    ;; Set the compose key to menu
  cmp-seq-delay 5 ;; 5ms delay between each compose-key sequence press

  ;; TODO Comment this is you want unhandled events not to be emitted
  fallthrough true

  ;; Set this to false to disable any command-execution in KMonad
  allow-cmd true
)

#| -------------------------------------------------------------------------
                            The original layout

   Keyboard is to be prepared like this:
   1. Reset memory: `Program+Control+F10`
   2. (Optionally) Switch to Dvorak: `Program+Control+F5`
   3. Swap Escape and CapsLock: `Program+F12 Esc CapsLock CapsLock Esc Program+F12`

   Kinesis cheatsheet: http://web.mit.edu/jmorzins/Public/kinesisCheatSheet.html
   ------------------------------------------------------------------------- |#

#| src:qwerty | #
(defsrc
  caps F1   F2   F3   F4   F5   F6   F7   F8   F9    F10  F11  F12  prnt slck pause

  =    1    2    3    4    5                    6    7    8    9    0    -
  tab  q    w    e    r    t                    y    u    i    o    p    \
  esc  a    s    d    f    g                    h    j    k    l    ;    '
  lsft z    x    c    v    b                    n    m    ,    .    / rsft
       grv  ins  left rght                           up   down [    ]

                           lctl lalt    ralt rctl
                      bspc del  home    pgup ret  spc
                                end     pgdn
)
|#

#| src:dvorak |#
(defsrc
  caps F1   F2   F3   F4   F5   F6   F7   F8   F9    F10  F11  F12  prnt slck pause

  =    1    2    3    4    5                    6    7    8    9    0    -
  tab  '    ,    .    p    y                    f    g    c    r    l    /
  esc  a    o    e    u    i                    d    h    t    n    s    \
  lsft ;    q    j    k    x                    b    m    w    v    z rsft
       grv  ins  left rght                           up   down [    ]

                           lctl lalt    ralt rctl
                      bspc del  home    pgup ret  spc
                                end     pgdn
)
#||#

#| --------------------------------------------------------------------------
                       Templates for custom layers
  -------------------------------------------------------------------------- |# #|

(deflayer template-_
  _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _

  _    _    _    _    _    _                    _    _    _    _    _    _
  _    _    _    _    _    _                    _    _    _    _    _    _
  _    _    _    _    _    _                    _    _    _    _    _    _
  _    _    _    _    _    _                    _    _    _    _    _    _
       _    _    _    _                              _    _    _    _

                           _    _       _    _
                      _    _    _       _    _    _
                                _       _
)

(deflayer template-XX
  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX    XX   XX   XX   XX   XX   XX

  XX   XX   XX   XX   XX   XX                   XX   XX   XX   XX   XX   XX
  XX   XX   XX   XX   XX   XX                   XX   XX   XX   XX   XX   XX
  XX   XX   XX   XX   XX   XX                   XX   XX   XX   XX   XX   XX
  XX   XX   XX   XX   XX   XX                   XX   XX   XX   XX   XX   XX
       XX   XX   XX   XX                             XX   XX   XX   XX

                           XX   XX      XX   XX
                      XX   XX   XX      XX   XX   XX
                                XX      XX  
)

(deflayer raw-qwerty
  caps @0_  F2   F3   F4   F5   F6   F7   F8   F9    F10  F11  F12  prnt slck pause

  =    1    2    3    4    5                    6    7    8    9    0    -
  tab  q    w    e    r    t                    y    u    i    o    p    \
  esc  a    s    d    f    g                    h    j    k    l    ;    '
  lsft z    x    c    v    b                    n    m    ,    .    / rsft
       grv  ins  left rght                           up   down [    ]

                           lctl lalt    ralt rctl
                      bspc  del home    pgup ret  spc
                                end     pgdn
)

|#

#| --------------------------------------------------------------------------
                                   Layers
  -------------------------------------------------------------------------- |#

(deflayer base
  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX    XX   XX   @sus XX   XX   XX

  @scr !    @    #    $    %                    ^    &    *    @=>  @=>{ XX
  tab  '    ,    .    p    y                    f    g    c    r    l    /
  esc  a    o    e    u    i                    d    h    t    n    s    -
  @sls ;    q    j    k    x                    b    m    w    v    z   @srs
       XX   XX  @<-  @->                            @↑   @↓    XX   XX

                           lctl lalt    ralt rctl
                      bspc  del   XX    XX   ret  spc
                                  XX    XX
)


(deflayer symbols
  #| Hint to type cyrillics:  `ё =ъ ~Ё +Ъ  |#
  _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _

  _    F1   F2   F3   F4   F5                   F6   F7   F8   F9   F10  _ 
  _    _    `    =    |    \                    /    |    -    _    _    _ 
  _    _    <    {   \(    [                    ]   \)    }    >    _    _ 
  _    _    ~    +    _    _                    _    _   \_    _    _    _ 
       _    _    @num @num                           _    _    _    _ 

                           _    _       _    _
                      _    _    _       _    _    _
                                _       _   
)


(deflayer navigation
  _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _

  _    @vt1 @vt2 @vt3 @vt4 _                    _    _    _    _    _    _ 
  _    _    _    _    _    _                    @cpu pgup up   _    _    _ 
  _    home _    end  _    tab                  @cpd left down rght _    _ 
  _    _    _    _    _    _                    _    pgdn _    _    _    _ 
       _    _    @num @num                           _    _    _    _ 

                           _    _       _    _ 
                      _    _    _       _    _    _ 
                                _       _   
)


(deflayer numbers
  _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _

  _    _    _    _    _    _                    _    _    _    _    _    _
  _    _    _    _    _    _                    _    7    8    9    _    _
  _    _    _    _    _    _                    _    4    5    6    _    _
  _    _    _    _    _    _                    0    1    2    3    _    _
       _    _    _    _                              _    _    _    _

                           _    _       _    _
                      _    _    @0_     _    _    _
                                _       _
)


#| --------------------------------------------------------------------------
                                Alias
  -------------------------------------------------------------------------- |#

(defalias

  ;; Strings (tap-macro)
  =>  #(spc = > spc)
  =>{ #(spc = > spc {)

  ;; Switch Layers
  ;; see also (layer-delay n x) (layer-next x)
  0    (layer-toggle base)
  0_   (layer-switch base)
  sym  (layer-toggle symbols)
  nav  (layer-toggle navigation)
  num  (layer-toggle numbers)
  num_ (layer-switch numbers)

  ;; Chords  (aliases for around-next)
  cpu C-pgup
  cpd C-pgdn
  ;; Virtual terminals
  vt1 C-A-F1
  vt2 C-A-F2
  vt3 C-A-F3
  vt4 C-A-F4
)

#| --------------------------------------------------------------------------
                                Sticky Keys
  -------------------------------------------------------------------------- |#

;; Let's make both shift keys sticky
(defalias
  sls (sticky-key 500 lsft)
  srs (sticky-key 500 rsft)
)

(defalias
  ld1 (layer-delay 500 base) ;; One way to get a leader-key
  ld2 (layer-next base)      ;; Another way to get a leader key
)

#| --------------------------------------------------------------------------
                               Multi-use buttons
  -------------------------------------------------------------------------- |#

(defalias
  xtn (tap-next x lsft)

  ;; Modifiers

  <-  (tap-hold-next-release 200 left @nav)
  ->  (tap-hold-next-release 200 rght @sym)
  ↑   (tap-hold-next-release 200 up   @sym)
  ↓   (tap-hold-next-release 200 down @nav)
)

#| --------------------------------------------------------------------------
                              Optional: Multi-tap

  Besides the tap-hold style buttons there is another multi-use button (with.
  only 1 variant, at the moment). The `multi-tap`.

  A `multi-tap` codes for different buttons depending on how often it is tapped.
  It is defined by a series of delays and buttons, followed by a last button
  without delay. As long as you tap the `multi-tap` within the delay specified,
  it will jump to the next button. Once the delay is exceeded the selected
  button is pressed. If the last button in the list is reached, it is
  immediately pressed.

  Note that you can actually hold the button, so in the below example, going:
  tap-tap-hold (wait 300ms) will get you a pressed c, until you release again.

  -------------------------------------------------------------------------- |#

(defalias
  mt  (multi-tap 300 a 300 b 300 c 300 d e))


#| --------------------------------------------------------------------------
                        Optional: Compose-key sequences

  Compose-key sequences are series of button-presses that your operating system
  will interpret as the insertion of a special character, like accented
  characters, or various special-languages. In that sense, they are just
  syntactic sugar for keyboard macros.

  To get this to work on Linux you will need to set your compose-key with a tool
  like `setxkbmap', as well as tell kmonad that information. See the `defcfg'
  block at the top of this file for a working example. Note that you need to
  wait ever so slightly for the keyboard to register with linux before the
  command gets executed, that's why the `sleep 1`. Also, note that all the
  `/run/current-system' stuff is because the author uses NixOS. Just find a
  shell-command that will:

    1. Sleep a moment
    2. Set the compose-key to your desired key

  Please be aware that what `setxkbmap' calls the `menu' key is not actually the
  `menu' key! If you want to use the often suggested

      setxkbmap -option compose:menu

  you will have to set your compose key within kmonad to `compose' and not
  `menu'.

  After this, this should work out of the box under Linux. Windows does not
  recognize the same compose-key sequences, but WinCompose will make most of the
  sequences line up with KMonad: http://wincompose.info/
  This has not in any way been tested on Mac.

  In addition to hard-coded symbols, we also provide 'uncompleted' macros. Since
  a compose-key sequence is literally just a series of keystrokes, we can omit
  the last one, and enter the sequence for 'add an umlaut' and let the user then
  press some letter to add this umlaut to. These are created using the `+"`
  syntax.

  -------------------------------------------------------------------------- |#

#| --------------------------------------------------------------------------
                        Optional: Command buttons

  Currently we also provide the ability to launch arbitrary shell-commands from
  inside kmonad. These commands are simply handed off to the command-shell
  without any further checking or waiting.

  NOTE: currently only tested on Linux, but should work on any platform, as long
  as the command is valid for that platform.

  The `cmd-button' function takes two arguments, the second one of which is
  optional. These represent the commands to be executed on pressing and
  releasing the button respectively.

  BEWARE: never run anyone's configuration without looking at it. You wouldn't
  want to push:

    (cmd-button "rm -rf ~/*") ;; Delete all this user's data


  -------------------------------------------------------------------------- |#

(defalias
  scr (cmd-button "scrot --line style=solid,width=3 --select /home/shovel/screenshots/$(date +%Y-%m-%-d-%R-%S).png")
  sus (cmd-button "exec systemctl suspend")

  ;; `dat' on press and `pth' on release
  bth (cmd-button "date >> /tmp/kmonad_example.txt"
                  "echo $PATH > /tmp/kmonad_path.txt")
)

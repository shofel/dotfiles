#| --------------------------------------------------------------------------

    @see https://github.com/kmonad/kmonad/blob/master/keymap/tutorial.kbd

  -------------------------------------------------------------------------- |#

(defcfg
  input  (device-file "/dev/input/by-id/usb-13ba_Barcode_Reader-event-kbd")
  output (uinput-sink "My KMonad output"
    ;; Prepare support for compose-key
    "sleep 1 && setxkbmap -option compose:ralt")
  cmp-seq ralt    ;; Set the compose key to `RightAlt'
  cmp-seq-delay 5 ;; 5ms delay between each compose-key sequence press

  ;; TODO Comment this is you want unhandled events not to be emitted
  fallthrough true

  ;; Set this to false to disable any command-execution in KMonad
  allow-cmd true
)

#| -------------------------------------------------------------------------
                            The original layout

   Keyboard is to be prepared like this:
   1. Reset memory: `Program+Control+F10`
   2. (Optionally) Switch to Dvorak: `Program+Control+F5`
   3. Swap Escape and CapsLock: `Program+F12 Esc CapsLock CapsLock Esc Program+F12`

   Kinesis cheatsheet: http://web.mit.edu/jmorzins/Public/kinesisCheatSheet.html
   ------------------------------------------------------------------------- |#

#| src:qwerty | #
(defsrc
  caps F1   F2   F3   F4   F5   F6   F7   F8   F9    F10  F11  F12  prnt slck pause

  =    1    2    3    4    5                    6    7    8    9    0    -
  tab  q    w    e    r    t                    y    u    i    o    p    \
  esc  a    s    d    f    g                    h    j    k    l    ;    '
  lsft z    x    c    v    b                    n    m    ,    .    / rsft
       grv  ins  left rght                           up   down [    ]

                           lctl lalt    ralt rctl
                      bspc del  home    pgup ret spc
                                end     pgdn
)
|#

#| src:dvorak |#
(defsrc
  caps F1   F2   F3   F4   F5   F6   F7   F8   F9    F10  F11  F12  prnt slck pause

  =    1    2    3    4    5                    6    7    8    9    0    -
  tab  '    ,    .    p    y                    f    g    c    r    l    /
  esc  a    o    e    u    i                    d    h    t    n    s    \
  lsft ;    q    j    k    x                    b    m    w    v    z rsft
       grv  ins  left rght                           up   down [    ]

                           lctl lalt    ralt rctl
                      bspc del  home    pgup ret spc
                                end     pgdn
)
#||#

#| --------------------------------------------------------------------------
                       Templates for custom layers
  -------------------------------------------------------------------------- |# #|

(deflayer template-_
  _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _

  _    _    _    _    _    _                    _    _    _    _    _    _
  _    _    _    _    _    _                    _    _    _    _    _    _
  _    _    _    _    _    _                    _    _    _    _    _    _
  _    _    _    _    _    _                    _    _    _    _    _    _
       _    _    _    _                              _    _    _    _

                           _    _       _    _
                      _    _    _       _    _   _
                                _       _
)

(deflayer template-XX
  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX    XX   XX   XX   XX   XX   XX

  XX   XX   XX   XX   XX   XX                   XX   XX   XX   XX   XX   XX
  XX   XX   XX   XX   XX   XX                   XX   XX   XX   XX   XX   XX
  XX   XX   XX   XX   XX   XX                   XX   XX   XX   XX   XX   XX
  XX   XX   XX   XX   XX   XX                   XX   XX   XX   XX   XX   XX
       XX   XX   XX   XX                             XX   XX   XX   XX

                           XX   XX      XX   XX
                      XX   XX   XX      XX   XX  XX
                                XX      XX  
)

|#

#| --------------------------------------------------------------------------
                                   Layers
  -------------------------------------------------------------------------- |#

(deflayer dvorak
  caps F1   F2   F3   F4   F5   F6   F7   F8   F9    F10  F11  F12  prnt slck pause
  \    1    2    3    4    5                    6    7    8    9    0    =
  tab  '    ,    .    p    y                    f    g    c    r    l    /
  esc  a    o    e    u    i                    d    h    t    n    s    -
  @sl  ;    q    j    k    x                    b    m    w    v    z  @sr
       XX   XX   left rght                           up   down XX   XX

                           lctl lalt    ralt rctl
                      bspc del  @3      @3   ret spc
                                @2      @2
)


(deflayer raw-qwerty
  caps F1   F2   F3   F4   F5   F6   F7   F8   F9    F10  F11  F12  prnt slck pause
  \    1    2    3    4    5                    6    7    8    9    0    =
  tab  q    w    e    r    t                    y    u    i    o    p    /
  esc  a    s    d    f    g                    h    j    k    l    ;    -
  lsft z    x    c    v    b                    n    m    ,    .    / rsft
       grv  ins  left rght                           up   down [    ]

                           lctl lalt    ralt rctl
                      bspc del  home    pgup ret spc
                                end     pgdn
)


(deflayer second
  _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _
  _    F1   F2   F3   F4   F5                   F6   F7   F8   F9   F10  _ 
  _    `    \    =    _    _                    _    @=>  @=>{ _    _    _ 
  _    <    [    {   \(    tab                  _   \)    }    ]    >    _ 
  _    _    _    _    _    _                    _    _    _    _    _    _ 
       _    _    _    _                              _    _    _    _ 

                           _    _       _    _ 
                      _    _    _       _    _   _ 
                                _       _   
)


(deflayer navigation
  _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _

  _    @cn1 @cn2 @cn3 @cn4 F5                   F6   F7   F8   F9   F10  _ 
  _    _    _    _    _    _                    @cpu pgup up   _    _    _ 
  _    home _    end  _    tab                  @cpd left down rght _    _ 
  _    _    _    _    _    _                    _    pgdn _    _    _    _ 
       _    _    _    _                              _    _    _    _ 

                           _    _       _    _ 
                      _    _    _       _    _   _ 
                                _       _   
)


#| --------------------------------------------------------------------------
                                Alias
  -------------------------------------------------------------------------- |#

(defalias

  ;; Strings
  =>  #(= >)
  =>{ #(= > {)

  ;; Layers
  2  (layer-toggle second)
  3  (layer-toggle navigation)

  ;; Chords
  cpu C-pgup
  cpd C-pgdn
  ;; Virtual console
  cn1 C-A-F1
  cn2 C-A-F2
  cn3 C-A-F3
  cn4 C-A-F4
)


#| NOTE: The above code could just as easily have been written as:
(defalias num (layer-toggle numbers))
(defalias kil C-A-del)
|#


#| --------------------------------------------------------------------------
                                Sticky Keys
  -------------------------------------------------------------------------- |#

;; Let's make both shift keys sticky
(defalias
  sl (sticky-key 300 lsft)
  sr (sticky-key 300 rsft)
)


#| --------------------------------------------------------------------------
                              Optional: tap-macros

  Let's look at a button we haven't seen yet, tap-macros.

  `tap-macro` is a function that takes an arbitrary number of buttons and
  returns a new button. When this new button is pressed it rapidly taps all its
  stored buttons in quick succesion except for its last button, which it only
  presses. This last button gets released when the `tap-macro` gets released.

  There are two ways to define a `tap-macro`, using the `tap-macro` function
  directly, or through the #() syntactic sugar. Both evaluate to exactly the
  same button.

    (tap-macro K M o n a d)
    #(K M o n a d)

  If you are going to use a `tap-macro` to perform a sequence of actions inside
  some program you probably want to include short pauses between inputs to give
  the program time to register all the key-presses. Therefore we also provide
  the 'pause' function, which simply pauses processing for a certain amount of
  milliseconds. Pauses can be created like this:

    (pause 20)
    P20

  You can also pause between each key stroke by specifying the `:delay' keyword,
  as well as a time in ms, at the end of a `tap-macro':

    (tap-macro K M o n a d :delay 5)
    #(K M o n a d :delay 5)

  The above would be equivalent to e.g.

    (tap-macro K P5 M P5 o P5 n P5 a P5 d)

  WARNING: DO NOT STORE YOUR PASSWORDS IN PLAIN TEXT OR IN YOUR KEYBOARD

  I know it might be tempting to store your password as a macro, but there are 2
  huge risks:
  1. You accidentally leak your config and expose your password
  2. Anyone who knows about the button can get clear-text representation of your
  password with any text editor, shell, or text-input field.

  Support for triggering shell commands directly from KMonad is described in the
  command buttons section below.

  This concludes this public service announcement.

  -------------------------------------------------------------------------- |#

(defalias
  mc1 #(K M o n a d)
  mc2 #(C-c P50 A-tab P50 C-v) ;; Careful, this might do something
  mc3 #(P200 h P150 4 P100 > < P50 > < P20 0 r z 1 ! 1 ! !)
  mc4 (tap-macro a (pause 50) @mc2 (pause 50) c)
  mc5 #(@mc3 spc @mc3 spc @mc3)
)

#| --------------------------------------------------------------------------
                          Optional: layer manipulation

  `layer-toggle` works as described before

  `layer-delay`, once pressed, temporarily switches to some layer for some
  milliseconds.    (layer-delay 500 my-layer)

  `layer-next`, once pressed, primes KMonad to handle the next press from some
    (around-next (layer-toggle layer-name) some-button)
  Until then though, use `layer-next` like this:
    (layer-next layer-name)

  `layer-switch`: change the base-layer of KMonad. As described at the top of
    (layer-switch my-layer)
  This is where things start getting potentially dangerous (i.e. get KMonad into

  `layer-add` and `layer-rem`. This is where you can very quickly cause yourself
  a big headache
    (layer-add name) ;; Add a layer to the top of the stack
    (layer-rem name) ;; Remove a layer by name (noop if no such layer)

  To use `layer-add` and `layer-rem` well, you should take a moment to think
  about how to create a layout that will prevent you from getting into
  situations where you enter a key-configuration you cannot get out of again.
  These two operations together, however, are very useful for activating a
  permanent overlay for a while. This technique is illustrated in the tap-hold
  overlay a bit further down.


  -------------------------------------------------------------------------- |# #|

(defalias

  yah (layer-toggle asking-for-trouble) ;; Completely safe
  nah (layer-add asking-for-trouble)    ;; Completely unsafe

  ld1 (layer-delay 500 numbers) ;; One way to get a leader-key
  ld2 (layer-next numbers)      ;; Another way to get a leader key

  ;; NOTE, this is safe because both `qwerty` and `colemak` contain the `@tst`
  ;; button which will get us to the `layer-test` layer, which itself contains
  ;; both `@qwe` and `@col`.
  qwe (layer-switch qwerty) ;; Set qwerty as the base layer
  col (layer-switch colemak) ;; Set colemak as the base layer
)

(defalias lol #(: - D))


;; One way to safely use layer-add and layer-rem: the button bound to layer-add
;; is the same button bound to layer-rem in the layer that `add` adds to the
;; stack. I.e., it becomes impossible to add or remove multiple copies of a
;; layer.
(defalias
  add (layer-add multi-overlay) ;; multi-overlay is defined in the next
  rem (layer-rem multi-overlay) ;; section below this
  )

#| --------------------------------------------------------------------------
                          Optional: Multi-use buttons

  Perhaps one of the most useful features of KMonad, where a lot of work has
  gone into, but also an area with many buttons that are ever so slightly
  different. The naming and structuring of these buttons might change sometime
  soon, but for now, this is what there is.

  For the next section being able to talk about examples is going to be handy,
  so consider the following scenario and mini-language that will be the same
  between scenarios.
    - We have some button `foo` that will be different between scenarios
    - `foo` is bound to 'Esc' on the input keyboard
    - the letters a s d f are bound to themselves
    - Px  signifies the press of button x on the keyboard
    - Rx  signifies the release of said button
    - Tx  signifies the sequential and near instantaneous press and release of x
    - 100 signifies 100ms pass

  So for example:
    Tesc Ta:
      tap of 'Esc' (triggering `foo`), tap of 'a' triggering `a`
    Pesc 100 Ta Tb Resc:
      press of 'Esc', 100ms pause, tap of 'a', tap of 'b', release of 'Esc'

  The `tap-next` button takes 2 buttons, one for tapping, one for holding, and
  combines them into a single button. When pressed, if the next event is its own
  release, we tap the 'tapping' button. In all other cases we first press the
  'holding' button then we handle the event. Then when the `tap-next` gets
  released, we release the 'holding' button.

  So, using our mini-language, we set foo to:
    (tap-next x lsft)
  Then:
    Tesc            -> x
    Tesc Ta         -> xa
    Pesc Ta Resc    -> A
    Pesc Ta Tr Resc -> AR

  The `tap-hold` button is very similar to `tap-next` (a theme, trust me). The
  difference lies in how the decision is made whether to tap or hold. A
  `tap-hold` waits for a particular timeout, if the `tap-hold` is released
  anywhere before that moment we execute a tap immediately. If the timeout
  occurs and the `tap-hold` is still held, we switch to holding mode.

  The additional feature of a `tap-hold` is that it pauses event-processing
  until it makes its decision and then rolls back processing when the decision
  has been made.

  So, again with the mini-language, we set foo to:
    (tap-hold 200 x lsft) ;; Like tap-next, but with a 200ms timeout
  Then:
    Tesc            -> x
    Tesc Ta         -> xa
    Pesc 300 a      -> A (the moment you press a)
    Pesc a 300      -> A (after 200 ms)
    Pesc a 100 Resc -> xa (both happening immediately on Resc)

  The `tap-hold-next` button is a combination of the previous 2. Essentially,
  think of it as a `tap-next` button, but it also switches to held after a
  period of time. This is useful, because if you have a (tap-next ret ctl) for
  example, and you press it thinking you want to press C-v, but then you change
  your mind, you now cannot release the button without triggering a 'ret', that
  you then have to backspace. With the `tap-hold-next` button, you simply
  outwait the delay, and you're good. I see no benefit of `tap-next` over
  `tap-hold-next` with a decent timeout value.

  The `tap-next-release` is like `tap-next`, except it decides whether to tap or
  hold based on the next release of a key that was *not* pressed before us. This
  also performs rollback like `tap-hold`.So, using the minilanguage and foo as:
    (tap-next-release x lsft)
  Then:
    Tesc Ta         -> xa
    Pa Pesc Ra Resc -> ax (because 'a' was already pressed when we started, so
                           foo decides it is tapping)
    Pesc Ta Resc    -> A (because a was pressed *and* released after we started,
                          so foo decides it is holding)

  These increasingly stranger buttons are, I think, coming from the stubborn
  drive of some of my more eccentric (and I mean that in the most positive way)
  users to make typing with modifiers on the home-row more comfortable.
  Especially layouts that encourage a lot of rolling motions are nicer to use
  with the `release` style buttons.

  The `tap-hold-next-release` (notice a trend?) is just like `tap-next-release`,
  but it comes with an additional timeout that, just like `tap-hold-next` will
  jump into holding-mode after a timeout.

  I honestly think that `tap-hold-next-release`, although it seems the most
  complicated, probably is the most comfortable to use. But I've put all of them
  in a testing layer down below, so give them a go and see what is nice.

  -------------------------------------------------------------------------- |#


(defalias
  xtn (tap-next x lsft)         ;; Shift that does 'x' on tap
  xth (tap-hold 400 x lsft)     ;; Long delay for easier testing
  thn (tap-hold-next 400 x lsft)
  tnr (tap-next-release x lsft)
  tnh (tap-hold-next-release 2000 x lsft)

  ;; Used it the colemak layer
  xcp (tap-hold-next 400 esc ctl)
)

#| --------------------------------------------------------------------------
                              Optional: Multi-tap

  Besides the tap-hold style buttons there is another multi-use button (with.
  only 1 variant, at the moment). The `multi-tap`.

  A `multi-tap` codes for different buttons depending on how often it is tapped.
  It is defined by a series of delays and buttons, followed by a last button
  without delay. As long as you tap the `multi-tap` within the delay specified,
  it will jump to the next button. Once the delay is exceeded the selected
  button is pressed. If the last button in the list is reached, it is
  immediately pressed.

  Note that you can actually hold the button, so in the below example, going:
  tap-tap-hold (wait 300ms) will get you a pressed c, until you release again.

  -------------------------------------------------------------------------- |#

(defalias
  mt  (multi-tap 300 a 300 b 300 c 300 d e))


#| --------------------------------------------------------------------------
                        Optional: Compose-key sequences

  Compose-key sequences are series of button-presses that your operating system
  will interpret as the insertion of a special character, like accented
  characters, or various special-languages. In that sense, they are just
  syntactic sugar for keyboard macros.

  To get this to work on Linux you will need to set your compose-key with a tool
  like `setxkbmap', as well as tell kmonad that information. See the `defcfg'
  block at the top of this file for a working example. Note that you need to
  wait ever so slightly for the keyboard to register with linux before the
  command gets executed, that's why the `sleep 1`. Also, note that all the
  `/run/current-system' stuff is because the author uses NixOS. Just find a
  shell-command that will:

    1. Sleep a moment
    2. Set the compose-key to your desired key

  Please be aware that what `setxkbmap' calls the `menu' key is not actually the
  `menu' key! If you want to use the often suggested

      setxkbmap -option compose:menu

  you will have to set your compose key within kmonad to `compose' and not
  `menu'.

  After this, this should work out of the box under Linux. Windows does not
  recognize the same compose-key sequences, but WinCompose will make most of the
  sequences line up with KMonad: http://wincompose.info/
  This has not in any way been tested on Mac.

  In addition to hard-coded symbols, we also provide 'uncompleted' macros. Since
  a compose-key sequence is literally just a series of keystrokes, we can omit
  the last one, and enter the sequence for 'add an umlaut' and let the user then
  press some letter to add this umlaut to. These are created using the `+"`
  syntax.

  -------------------------------------------------------------------------- |#

#| --------------------------------------------------------------------------
                        Optional: Command buttons

  Currently we also provide the ability to launch arbitrary shell-commands from
  inside kmonad. These commands are simply handed off to the command-shell
  without any further checking or waiting.

  NOTE: currently only tested on Linux, but should work on any platform, as long
  as the command is valid for that platform.

  The `cmd-button' function takes two arguments, the second one of which is
  optional. These represent the commands to be executed on pressing and
  releasing the button respectively.

  BEWARE: never run anyone's configuration without looking at it. You wouldn't
  want to push:

    (cmd-button "rm -rf ~/*") ;; Delete all this user's data


  -------------------------------------------------------------------------- |#

(defalias
  dat (cmd-button "date >> /tmp/kmonad_example.txt")   ;; Append date to tmpfile
  pth (cmd-button "echo $PATH > /tmp/kmonad_path.txt") ;; Write out PATH
  ;; `dat' on press and `pth' on release
  bth (cmd-button "date >> /tmp/kmonad_example.txt"
                  "echo $PATH > /tmp/kmonad_path.txt")
)

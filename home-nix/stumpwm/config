;; vim: set ft=lisp:
;;
;; TODO use the same font as in kitty
;; TODO use shell program from home-manager
;;
;; @see stumpwm config in a flake
;;      https://github.com/TLATER/dotfiles/blob/master/dotfiles/stumpwm/config

(in-package :stumpwm)

(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)
(setf *window-border-style* :thin)

(setf *mouse-focus-policy* :sloppy) ; :ignore :sloppy :click

(setf *shell-program* "/usr/bin/fish")

;;;
;;; Modules.
;;;
; @see https://stumpwm.github.io/git/stumpwm-git_15.html#Modules
; briefly: invoke 'make install-modules' from StumpWMâ€™s root source directory.
;          Yes, you should install StumpWM from sources to make this work.

;;;
;;; Fonts {{{
;;;
(load-module "ttf-fonts")
(xft:cache-fonts)
(set-font (make-instance 'xft:font :family "DejaVu Sans Mono" :subfamily "Book" :size 13))
;;; }}} Fonts

;;;
;;; Keys {{{
;;;

;;; @see `stumpwm/keysyms.lisp` for the list of key names
;;; @see https://stumpwm.github.io/git/stumpwm-git_2.html#Binding-Keys

(set-prefix-key (kbd "XF86Launch1"))

(setf *root-map* (make-sparse-keymap))

(define-key *root-map* (kbd "!") "exec")
(define-key *root-map* (kbd ";") "colon")
(define-key *root-map* (kbd ":") "eval")

(define-key *root-map* (kbd "m") "lastmsg")
(define-key *root-map* (kbd "a") "time")

;;
(define-key *root-map* (kbd "C-M-r") "restart-soft") ;; To test changes.
(define-key *root-map* (kbd "I") "show-window-properties")
(define-key *root-map* (kbd "C-M-s") "exec systemctl suspend")

;; Change frames.
(define-key *root-map* (kbd "h") "move-focus left")
(define-key *root-map* (kbd "l") "move-focus right")

;; Windows.
(define-key *root-map* (kbd "x") *exchange-window-map*)
(define-key *root-map* (kbd "r") "title") ; rename
(define-key *root-map* (kbd "t") "other-window") ; togggle
(define-key *root-map* (kbd "w") "windowlist")
(define-key *root-map* (kbd "L") "move-window right")
(define-key *root-map* (kbd "H") "move-window left")
(define-key *root-map* (kbd "K") "kill")

;; Fullscreen
(define-key *root-map* (kbd "f") "fullscreen")
(define-key *root-map* (kbd "F") "meta F11")

;; Groups.
(define-key *root-map* (kbd "R") "grename")
(define-key *root-map* (kbd "g") "grouplist")
(define-key *root-map* (kbd "T") "gother")
(define-key *root-map* (kbd "XF86Launch1") "gother")
(define-key *root-map* (kbd "1") "gselect 1")
(define-key *root-map* (kbd "2") "gselect 2")
(define-key *root-map* (kbd "3") "gselect 3")
(define-key *root-map* (kbd "4") "gselect 4")
(define-key *root-map* (kbd "5") "gselect 5")
(define-key *root-map* (kbd "6") "gselect 6")
(define-key *root-map* (kbd "7") "gselect 7")
(define-key *root-map* (kbd "8") "gselect 8")
(define-key *root-map* (kbd "9") "gselect 9")

;; Start terminal-emulator
(define-key *root-map* (kbd "C") "exec kitty --session /home/shovel/.config/kitty/empty_session")
(define-key *root-map* (kbd "c") "exec kitty")


;; Browsers.

(defun -exec-browser-command (-browser)
  (concatenate 'string
               "exec " -browser
               " --high-dpi-support"
               " --force-device-scale-factor=1.5"))

(define-key *root-map* (kbd "y") (-exec-browser-command "yandex-browser-beta"))
(define-key *root-map* (kbd "b") (-exec-browser-command "google-chrome-beta"))
(define-key *root-map* (kbd "B") (-exec-browser-command "google-chrome"))
;; }}} 

;;
;; Restore.
;;

;; Restore groups and frames.
(defun -restore-groups-and-frames ()
  (run-commands "gselect 1"
                "grename one")
  ;; To update the dump, use `dump-desktop` command
  (restore-from-file "~/.config/stumpwm/desktop"))

;; Restore window placement rules.
(defun -restore-window-rules ()
  (restore-window-placement-rules "~/.config/stumpwm/window-placement"))

;;
;; Initializing.
;;
(when *initializing*
  (-restore-groups-and-frames)
  (-restore-window-rules)
  (run-commands (-exec-browser-command "google-chrome-beta")
                "exec kitty"))
